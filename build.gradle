import java.nio.file.Paths

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id 'jvm-test-suite'
  id 'jacoco-report-aggregation'
  alias(libs.plugins.licensecheck)
}

ext.isToSign = project.hasProperty("doSign")

wrapper {
  gradleVersion = '8.3'
}

allprojects {
  group 'io.github.muellerj2'
  version '0.3-SNAPSHOT'
  
  apply plugin: 'com.github.hierynomus.license'
  
  repositories {
    mavenLocal()
    mavenCentral()
  }

  license {
    ext.name = rootProject.name
    header rootProject.file('LICENSEHEADER')
    includes(['**/*.java'])
    mapping {
      java = 'SLASHSTAR_STYLE' // suppress javadoc checking of license
    }
  }
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'signing'
  apply plugin: 'maven-publish'
  apply plugin: 'jacoco'

  java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
  }
  
  jar {
    from ("$rootDir") {
      include "LICENSE"
	  into "META-INF"
    }
  }
  
  sourcesJar {
    from ("$rootDir") {
      include "LICENSE"
	  into "META-INF"
    }
  }
  
  javadoc {
    failOnError true
	options {
	  tags = [ "implNote" ]
	  links 'https://docs.oracle.com/javase/8/docs/api/'
	  addBooleanOption('Xwerror', true)
	}
  }
  
  javadocJar {
    from ("$rootDir") {
      include "LICENSE"
	  into "META-INF"
    }
  }
  
  tasks.withType(GenerateModuleMetadata) {
      enabled = false
  }
  
  test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    reports {
      junitXml.required = false
      html.required = true
    }
    
  	finalizedBy jacocoTestReport
  }

  jacocoTestReport {
    dependsOn test
  }
}

dependencies {
  subprojects.each { jacocoAggregation it }
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) { 
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

testCodeCoverageReport {
  reports {
    xml.required = false
    csv.required = true
  }
}
check {
  dependsOn testCodeCoverageReport
}